generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ⚡ TABLE USERS ⚡
model User {
  id        String    @id @default(uuid())
  name      String
  lastname  String
  email     String    @unique
  username  String    @unique
  password  String
  picture   String?
  role      Role      @default(ASSISTANT)
  status    Status    @default(ACTIVE)
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

// ⚡ TABLE DOCTORS ⚡
model Doctor {
  id        String    @id @default(uuid())
  name      String
  lastname  String
  email     String    @unique
  phone     String    @unique
  card      String    @unique
  picture   String?
  specialty Specialty @default(GENERAL)
  status    Status    @default(ACTIVE)
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

// ⚡ TABLE TEST ⚡
model Test {
  id        String    @id @default(uuid())
  name      String    @unique
  status    Status    @default(ACTIVE)
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

// ⚡ TABLE PATIENT ⚡
model Patient {
  id        String    @id @default(uuid())
  name      String
  lastname  String
  phone     String    @unique
  address   String
  card      String    @unique
  birthday  String
  picture   String
  smoke     Boolean
  allergies Boolean
  status    Status    @default(ACTIVE)
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  result    Result[]
}

// ⚡ TABLE RESULT ⚡
model Result {
  id            String      @id @default(uuid())
  diagnostic    String?
  patient       Patient     @relation(fields: [patientId], references: [id])
  patientId     String      @unique
  appointment   Appointment @relation(fields: [appointmentId], references: [id])
  appointmentId String      @unique
  status        Progress    @default(INCOMPLETE)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime?   @updatedAt
}

// ⚡ TABLE APPOINTMENT ⚡
model Appointment {
  id     String   @id @default(uuid())
  result Result[]
}

// ⚡ ENUMS PROPERTYS ⚡
enum Role {
  ASSISTANT
  ADMIN
}

enum Specialty {
  NURSE
  GENERAL
}

enum Status {
  INACTIVE
  ACTIVE
}

enum Progress {
  INCOMPLETE
  COMPLETE
}
